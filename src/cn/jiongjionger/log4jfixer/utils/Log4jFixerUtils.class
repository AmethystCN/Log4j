Êþº¾package cn.jiongjionger.log4jfixer.utils;import java.io.Serializable;import java.lang.reflect.Field;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import javax.annotation.Nullable;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.core.Appender;import org.apache.logging.log4j.core.Layout;import org.apache.logging.log4j.core.Logger;import org.apache.logging.log4j.core.config.Configuration;import org.apache.logging.log4j.core.layout.PatternLayout;import org.apache.logging.log4j.core.lookup.Interpolator;import org.apache.logging.log4j.core.lookup.StrLookup;public class Log4jFixerUtils {    private static Field lookupsField = null;    private static Field configField = null;    public Log4jFixerUtils() {    }    private static void initInterpolatorField() {        try {            lookupsField = Interpolator.class.getDeclaredField("lookups");            lookupsField.setAccessible(true);            configField = getConfigField();            configField.setAccessible(true);        } catch (Exception var1) {        }    }    @Nullable    private static Field getConfigField() {        Field field = getDeclaredFieldWithSuperClass(PatternLayout.class, "configuration");        if (field == null) {            field = getDeclaredFieldWithSuperClass(PatternLayout.class, "config");        }        return field;    }    @Nullable    private static Field getDeclaredFieldWithSuperClass(Class<?> clazz, String fieldName) {        Class currentClass = clazz;        while(currentClass != null) {            try {                return currentClass.getDeclaredField(fieldName);            } catch (NoSuchFieldException var4) {                currentClass = currentClass.getSuperclass();            }        }        return null;    }    public static boolean findInterpolator() {        boolean status = false;        try {            Class.forName("org.apache.logging.log4j.core.lookup.Interpolator");            status = true;        } catch (ClassNotFoundException var2) {        }        return status;    }    public static boolean tryFix() {        if (lookupsField != null && configField != null) {            boolean status = false;            try {                Logger rootLogger = (Logger)LogManager.getRootLogger();                StrLookup strLookup = rootLogger.getContext().getConfiguration().getStrSubstitutor().getVariableResolver();                if (strLookup instanceof Interpolator) {                    clearLookups((Interpolator)strLookup);                }                Map<String, Appender> appenders = rootLogger.getAppenders();                if (!appenders.isEmpty()) {                    Iterator iterator = appenders.entrySet().iterator();                    while(iterator.hasNext()) {                        Entry<String, Appender> entry = (Entry)iterator.next();                        Appender appender = (Appender)entry.getValue();                        Layout<? extends Serializable> layout = appender.getLayout();                        if (layout instanceof PatternLayout) {                            PatternLayout patternLayout = (PatternLayout)layout;                            Configuration config = (Configuration)configField.get(patternLayout);                            StrLookup patternLayoutStrLookup = config.getStrSubstitutor().getVariableResolver();                            if (patternLayoutStrLookup instanceof Interpolator) {                                clearLookups((Interpolator)patternLayoutStrLookup);                            }                        }                    }                }                status = true;            } catch (Exception var11) {            }            return status;        } else {            return false;        }    }    private static void clearLookups(Interpolator interpolator) {        if (lookupsField != null) {            try {                Object lookupsObject = lookupsField.get(interpolator);                if (lookupsObject instanceof Map) {                    ((Map)lookupsObject).clear();                }            } catch (Exception var2) {            }        }    }    static {        initInterpolatorField();    }}